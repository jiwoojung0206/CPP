#include <iostream>

using namespace std;

class Deep{
private:
    int *data;
    
public:
    void set_value(int d) {*data = d;}
    int get_value() {return *data;}
    
    //constructor
    Deep(int d);
    
    //copy constructor
    Deep(const Deep &source);
    
    //destructor
     ~Deep();
};

Deep::Deep(int d) {
    data = new int;
    *data = d;
}

//deep copy
Deep::Deep(const Deep &source)
    : Deep{*source.data} {
    }

Deep::~Deep() {
    delete data;
}

void display_deep(Deep s) {
    cout << s.get_value() << endl;
}


int main() {
    
    Deep alpha{100};
    display_deep(alpha);
    
    Deep beta{alpha};
    beta.set_value(1000);
    
    cout << alpha.get_value() << endl;
    //alpha = 100
    cout << beta.get_value() << endl;
    //beta = 1000
    
    cout << endl;
    return 0;
}
