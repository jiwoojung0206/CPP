#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Movie {
private:
    string name;
    string rating;
    int watched;

public:
    Movie(string name_val, string ratings_val, int watched_val)
        : name{name_val}, rating{ratings_val}, watched{watched_val} {
        }
    
    Movie(const Movie &source)
        : Movie(source.name, source.rating, source.watched) {
        }
    
    ~Movie() {
    }
    
    void set_name(string n) {name = n;}
    string get_name() const {return name;}

    void set_rating(string r) {name = r;}
    string get_rating() {return rating;}
    
    void set_watched(int w) {watched = w;}
    int get_watched() {return watched;}
    
    void increment_watched() {++watched;}
    
    void display() {
        cout << name << ", " << rating << ", " << watched << endl;
    }
};

class Movies {
private:
    vector<Movie> movies;
    
public:

    bool add_to_list(string name, string rating, int watched) {
        for (const Movie &movie : movies) {
            if (movie.get_name() == name)
                return false;
        }
        Movie New {name, rating, watched};
        movies.push_back(New);
        return true;
    }
    
    bool increment_watched(string name) {
        for (Movie &movie : movies) {
            if (movie.get_name() == name) {
                movie.increment_watched();
                return true;
            }
        }
        return false;
    }
    
    void display() {
        if (movies.size() == 0)
            cout << "Nothing\n" << endl;
        else {
            for (auto &movie : movies)
                movie.display();
                cout << endl;
        }
    }
    
    Movies() {
    }

    ~Movies() {
    }
};

void increment_watched(Movies &movies, string name) {
    if (movies.increment_watched(name))
        cout << name << " incremented\n" << endl;
    else cout << "Not in the list\n" << endl;
}
void add_movie(Movies &movies, string name, string rating, int watched) {
    if (movies.add_to_list(name, rating, watched))
        cout << name << " added\n" << endl;
    else cout << "Already exists\n" << endl;
}

int main() {
    
    Movies mylist;
    
    mylist.display();
    
    add_movie(mylist, "Endgame", "PG-13", 2);
    increment_watched(mylist, "Endgame");
    
    add_movie(mylist, "Kimi no Nawa", "PG-13", 4);
    increment_watched(mylist, "Black Panther");
    
    mylist.display();
    
    add_movie(mylist, "Endgame", "PG-13", 3);

    
    cout << endl;
    return 0;
}
