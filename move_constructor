#include <iostream>
#include <vector>

using namespace std;

class Move{
private:
    int *data;
public:
    void set_value(int d) {*data = d;}
    int get_value() {return *data;}
    
    Move(int d);
    
    Move(const Move &source);
    
    Move(Move &&source) noexcept;
    
    ~Move();
};

Move::Move(int d) {
    data = new int;
    *data = d;
    cout << "Constructor for: " << d << endl;
}

Move::Move(const Move &source) 
    : Move{*source.data} {
        cout << "Deep copy for: " << *data << endl;
    }

Move::Move(Move &&source) noexcept
    : data{source.data} {
        source.data = nullptr;
        cout << "Move constructor for: " << *data << endl;
    }

Move::~Move() {
    if (data != nullptr) 
        cout << "Freeing space for: " << *data << endl;
    else
        cout << "Freeing space for nullptr" << endl;
    
    delete data;
}

int main() {
    
    vector<Move> vec;
    
    vec.push_back(Move{10});
    vec.push_back(Move{20});
    vec.push_back(Move{30});
    vec.push_back(Move{40});
    vec.push_back(Move{50});
    vec.push_back(Move{60});
    
    cout << endl;
    return 0;
}
